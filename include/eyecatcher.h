#ifndef _EYECATCHER_H
#define _EYECATCHER_H

#include <stdint.h>

#define PALETTE_FBI                 ((volatile uint16_t *) 0x400020)

#define EYECATCHER_POSITION         ((volatile uint16_t *) 0x10FCD8)
#define EYECATCHER_ITERATOR         ((volatile uint16_t *) 0x10FCDC)
#define EYECATCHER_CHANGE_PALETTE   ((volatile uint8_t *)  0x10FCE6)    // 0 = Do not update, 1 = Update palette
#define EYECATCHER_PALETTE_OFFSET   ((volatile uint16_t *) 0x10FCE8)

void play_bios_eyecatcher();

static const uint16_t neo_geo_logo[] = {
    0x0301, 0x0024,             // Write 0x24 word data
    0x0102,                     // Increment with 1
    0x0003, 0x8401,             // Horizontal position
    0x0004, 0x0010, 0xfc00,     // Use data from 10fc00, and run cmd 06
    0x0003, 0x8201,             // Vertical position 
    0x0006,                     // Run another 0x24 word data
    0x0003, 0x8001,             // Shrinking
    0x0006,                     // Run another 0x24 word data
    0x0000,                     // End
};

// Blue SNK LOGO
static const uint16_t neo_geo_logo_blue[] = {
    0x2002,             // Increment with 2
    0x0003, 0x71f6,     // Set vram adress. fix layer, lower mid center
    0x0001, 0xf2ff,     // Padd with f2 and end with ff
    0x0007, 0x0001, 0x0203, 0x0405, 0x0607, 0x0809, 0xffff,
    0x0005, 0x0001,     // Increment with 1
    0x0007, 0x0a0b, 0x0c0d, 0x0e0f, 0x1415, 0x1617, 0xffff,
    0x0005, 0x0001,     // Increment with 1
    0x0007, 0x1819, 0x1a1b, 0x1c1d, 0x1e1f, 0x405e, 0xffff,
    0x0000,             // End
};

static const uint16_t max_330[] = {
    0xf005, 0xf006, 0xf007, 0xf008, 0xf009, 0xf00a, 0xf00b, 0xf00c, 0xf00d, 0xf00e, 0xf00f, 0xf014, 0xf015, 0xf016, 0xf017, 0xf018, 
    0xf019, 0xf01a, 0xf01b, 0xf01c, 0xf01d, 0xf01e, 0xf01f, 0xf040, 0xf05e, 0xf05f, 0xf060, 0xf07c, 0xf07d, 0xf07e, 0xf07f, 0xf099, 
    0xf09a, 0xf09b, 0xf09c, 0xf09d, 0xf09e, 0xf09f, 0xf0ff, 0xf0ba, 0xf0bb, 0xf0bc, 0xf0bd, 0xf0be, 0xf0bf, 0xf0d9, 0xf0da, 0xf0db, 
    0xf0dc, 0xf0dd, 0xf0de, 0xf0df, 0xf0fa, 0xf0fb, 0xf0fc, 0xf0fd, 0xf100, 0xf101, 0xf102, 0xf103, 0xf104, 0xf105, 0xf106, 0xf107, 
    0x0000,
};

static const uint8_t neo_geo_byte_stream_1[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x2b, 0xff, 0x0d, 0x1b, 0x2a, 0x39, 0x0c, 0x1a, 0x29, 0x38, 0x0b, 0x19, 0x28, 0x37, 0x0a, 0x18,
    0x27, 0x36, 0x09, 0x17, 0x26, 0x35, 0x08, 0x16, 0x25, 0x34, 0x07, 0x15, 0x24, 0x33, 0x06, 0x14, 0x23, 0x32, 0x05, 0x13, 0x22, 0x31, 
    0x04, 0x12, 0x21, 0x30, 0x03, 0x11, 0x20, 0x2f, 0x02, 0x10, 0x1f, 0x2e, 0x01, 0x0f, 0x1e, 0x2d, 0x00, 0x0e, 0x1d, 0x2c, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};

static const uint8_t neo_geo_byte_stream_2[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0e, 0x1d, 0x2c, 0x01, 0x0f, 0x1e, 0x2d, 0x02, 0x10, 0x1f, 0x2e, 0x03, 0x11, 
    0x20, 0x2f, 0x04, 0x12, 0x21, 0x30, 0x05, 0x13, 0x22, 0x31, 0x06, 0x14, 0x23, 0x32, 0x07, 0x15, 0x24, 0x33, 0x08, 0x16, 0x25, 0x34,
    0x09, 0x17, 0x26, 0x35, 0x0a, 0x18, 0x27, 0x36, 0x0b, 0x19, 0x28, 0x37, 0x0c, 0x1a, 0x29, 0x38, 0x0d, 0x1b, 0x2a, 0x39, 0xff, 0x1c, 
    0x2b, 0xff, 0xff, 0xff, 0xff, 0xff
};

static const uint16_t neo_geo_byte_stream_palette_1 [] = {
    // First loop
    0x0000, 0x0000, 0x0fff, 0x0fff, 0x0fff, 0x0fff,
    0x7000, 0x7333, 0x7bbb, 0x7ddd, 0x7eee, 0x7eee,
    0x0111, 0x0444, 0x7bbb, 0x7ddd, 0x0eee, 0x0eee, 
    0x7111, 0x0444, 0x7bbb, 0x7ddd, 0x7ddd, 0x7ddd, 
    0x0222, 0x7444, 0x7bbb, 0x7ddd, 0x0ddd, 0x0ddd, 
    0x7222, 0x7444, 0x7bbb, 0x0ddd, 0x7ccc, 0x7ccc, 
    0x0333, 0x0555, 0x7bbb, 0x0ddd, 0x7ccc, 0x7ccc, 
    0x7333, 0x0555, 0x7bbb, 0x0ddd, 0x0ccc, 0x0ccc,
    0x0444, 0x7555, 0x7bbb, 0x7ccc, 0x7bbb, 0x7bbb, 
    0x7444, 0x7555, 0x7bbb, 0x0ccc, 0x0bbb, 0x0bbb, 
    0x0555, 0x0666, 0x7bbb, 0x7bbb, 0x7aaa, 0x7aaa, 
    0x7555, 0x0666, 0x7bbb, 0x0bbb, 0x0aaa, 0x0aaa, 
    0x0666, 0x7666, 0x7bbb, 0x7aaa, 0x7999, 0x7999, 
    0x7666, 0x7666, 0x7bbb, 0x0aaa, 0x0999, 0x0999, 
    0x0777, 0x0777, 0x7bbb, 0x7999, 0x7888, 0x7888, 
    0x7777, 0x7777, 0x7bbb, 0x7999, 0x7888, 0x7888, 
    // Second loop
    0x7888, 0x7888, 0x7bbb, 0x7999, 0x7888, 0x7888,
    0x0999, 0x7888, 0x7bbb, 0x7999, 0x0888, 0x0888, 
    0x7999, 0x7888, 0x7bbb, 0x0999, 0x7777, 0x7777, 
    0x0aaa, 0x0999, 0x0bbb, 0x0999, 0x0777, 0x0777, 
    0x7aaa, 0x0999, 0x0bbb, 0x7888, 0x7666, 0x7666, 
    0x0bbb, 0x7999, 0x0bbb, 0x7888, 0x0666, 0x0666,
    0x7bbb, 0x7999, 0x0bbb, 0x7888, 0x7555, 0x7555, 
    0x0ccc, 0x0aaa, 0x0bbb, 0x0888, 0x0555, 0x0555, 
    0x7ccc, 0x7aaa, 0x7aaa, 0x7777, 0x7444, 0x7444, 
    0x0ddd, 0x0bbb, 0x7aaa, 0x7777, 0x0444, 0x0444, 
    0x7ddd, 0x7bbb, 0x7aaa, 0x0777, 0x7333, 0x7333, 
    0x0eee, 0x0ccc, 0x7aaa, 0x7666, 0x0333, 0x0333, 
    0x7eee, 0x7ccc, 0x7aaa, 0x0666, 0x7222, 0x7222, 
    0x0fff, 0x0ddd, 0x7aaa, 0x0666, 0x0222, 0x0222, 
    0x0fff, 0x0ddd, 0x7aaa, 0x7555, 0x0111, 0x0111, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x0000, 0x0000, 
    // Third loop
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x1002, 0x0000, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x0004, 0x0000, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x1005, 0x0000,
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x0007, 0x0000, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x1008, 0x0000, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x000b, 0x0000, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x100d, 0x0000, 
    0x1fff, 0x5cdd, 0x0aaa, 0x7555, 0x302f, 0x0000, 
    0x5eff, 0x0cde, 0x0aaa, 0x7555, 0x104f, 0x0000, 
    0x1dff, 0x5bde, 0x58ab, 0x2457, 0x109f, 0x0000, 
    0x5eff, 0x0cde, 0x0aaa, 0x7555, 0x10ff, 0x0000, 
    0x1fff, 0x5cdd, 0x0aaa, 0x7555, 0x10af, 0x0000, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x109f, 0x0000, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x008f, 0x0000, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x007f, 0x0000, 
    0x0fff, 0x0ddd, 0x0aaa, 0x7555, 0x306e, 0x0000,
};

static const uint16_t fbi_palette[] = {
    0x0000, 0x0FE0, 0x0FC0, 0x0DA0, 0x0B80, 0x0950, 0x0EEF, 0x0999,
    0x0666, 0x0D00, 0x0B00, 0x05C0, 0x0080, 0x002E, 0x000A, 0x0000,
};

static const uint16_t fbi_logo[] = {
    0x2002,
    0x0003, 0x7267,
    0x010D, 0x1B01,
    0x0005, 0xFFA1,
    0x070D, 0x1B02,
    0x0005, 0x0001,
    0x070D, 0x1B09,
    0x0005, 0xFFE1,
    0x090D, 0x1B10, 
    0x0005, 0x0001, 
    0x090D, 0x1B19, 
    0x0005, 0x0001, 
    0x090D, 0x1B22, 
    0x0005, 0x0001, 
    0x090D, 0x1B2B, 
    0x0005, 0x0001, 
    0x090D, 0x1B34, 
    0x0005, 0x0021, 
    0x070D, 0x1B3D, 
    0x0005, 0x0001, 
    0x070D, 0x1B44, 
    0x0005, 0x0061, 
    0x010D, 0x1B4B, 
    0x0001, 0x1BFF, 
    0x0003, 0x70F6,
    0x0007, 0x4C4D, 0x4E4F, 0x4F50, 0x5157, 0x0052, 0x534F, 0x5455, 0x0056, 0x5750, 0x0052, 0x5156, 0x5857, 0x59FF,
    0x0005, 0xFFA2, 
    0x0007, 0x5A5B, 0x5C5D, 0x5E5F, 0x6057, 0x6157, 0x5057, 0x5762, 0x534F, 0x5763, 0x5262, 0x5150, 0x6455, 0x5351, 0x6365, 0x6667, 0x6800, 0xFFFF,
    0x0000
};

static const uint16_t japan_warning[] = {
    0x0003, 0x7204, 
    0xf108, 0x5741, 0x524e, 0x494e, 0x47ff, 
    0x0003, 0x7068, 
    0xf108, 0x5448, 0x4953, 0x2047, 0x414d, 0x4520, 0x4953, 0x2046, 0x4f52, 0x2055, 0x5345, 0x2049, 0x4e20, 0x4a41, 0x5041, 0x4e20, 0x4f4e, 0x4c59, 0x2eff, 
    0x0005, 0x0002, 
    0xf108, 0x5341, 0x4c45, 0x532c, 0x4558, 0x504f, 0x5254, 0x532c, 0x4f52, 0x204f, 0x5045, 0x5241, 0x5449, 0x4f4e, 0x204f, 0x5554, 0x5349, 0x4445, 0xffff, 
    0x0005, 0x0002, 
    0xf108, 0x5448, 0x4953, 0x2054, 0x4552, 0x5249, 0x544f, 0x5259, 0x204d, 0x4159, 0x2056, 0x494f, 0x4c41, 0x5445, 0xffff, 
    0x0005, 0x0002, 
    0xf108, 0x494e, 0x5445, 0x524e, 0x4154, 0x494f, 0x4e41, 0x4c20, 0x434f, 0x5059, 0x5249, 0x4748, 0x5420, 0x414e, 0x44ff, 
    0x0005, 0x0002, 
    0xf108, 0x5452, 0x4144, 0x454d, 0x4152, 0x4b20, 0x4c41, 0x5720, 0x414e, 0x4420, 0x5448, 0x4520, 0x5649, 0x4f4c, 0x4154, 0x4f52, 0xffff,
    0x0005, 0x0002, 
    0xf108, 0x5355, 0x424a, 0x4543, 0x5420, 0x544f, 0x2053, 0x4556, 0x4552, 0x4520, 0x5045, 0x4e41, 0x4c54, 0x4945, 0x532e, 0xffff, 
    0x0000
};

#endif // _EYECATCHER_H
